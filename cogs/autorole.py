import logging
import discord
from discord.ext import commands

log = logging.getLogger("cog-autorole")

# IDs des r√¥les
LVL10_ROLE_ID = 1297161587744047106
CROSS_TRADE_ACCESS_ID = 1306954214106202145  # ‚ö†Ô∏è Mets ici l‚ÄôID exact du r√¥le Cross Trade Access
CROSS_TRADE_BAN_ID = 1306954214106202144
MARKET_BAN_ID = 1306958134245457970


class AutoRole(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def update_cross_trade_access(self, member: discord.Member):
        """V√©rifie les r√¥les d‚Äôun membre et ajuste Cross Trade Access."""
        guild = member.guild
        access_role = guild.get_role(CROSS_TRADE_ACCESS_ID)
        lvl10_role = guild.get_role(LVL10_ROLE_ID)
        ban_role = guild.get_role(CROSS_TRADE_BAN_ID)
        market_ban_role = guild.get_role(MARKET_BAN_ID)

        if not access_role:
            log.warning("‚ö†Ô∏è Cross Trade Access role introuvable dans le serveur.")
            return

        # Condition : doit avoir lvl10 ET ne pas avoir de ban
        if lvl10_role in member.roles and ban_role not in member.roles and market_ban_role not in member.roles:
            if access_role not in member.roles:
                try:
                    await member.add_roles(access_role, reason="AutoRole: Lvl10 sans ban")
                    log.info("‚úÖ Ajout de Cross Trade Access √† %s", member.display_name)
                except discord.Forbidden:
                    log.error("‚ùå Permissions insuffisantes pour ajouter le r√¥le √† %s", member.display_name)
        else:
            if access_role in member.roles:
                try:
                    await member.remove_roles(access_role, reason="AutoRole: Ban d√©tect√© ou pas lvl10")
                    log.info("üö´ Retrait de Cross Trade Access √† %s", member.display_name)
                except discord.Forbidden:
                    log.error("‚ùå Permissions insuffisantes pour retirer le r√¥le √† %s", member.display_name)

    # --- Event : quand un r√¥le est ajout√© ou retir√© ---
    @commands.Cog.listener()
    async def on_member_update(self, before: discord.Member, after: discord.Member):
        if before.roles != after.roles:
            await self.update_cross_trade_access(after)

    # --- V√©rification globale au d√©marrage ---
    @commands.Cog.listener()
    async def on_ready(self):
        for guild in self.bot.guilds:
            log.info("üîç V√©rification globale des r√¥les dans %s...", guild.name)
            for member in guild.members:
                await self.update_cross_trade_access(member)
        log.info("‚úÖ V√©rification globale termin√©e.")

    # --- Commande admin pour forcer une v√©rification ---
    @commands.command(name="check_autorole")
    @commands.has_permissions(administrator=True)
    async def check_autorole(self, ctx: commands.Context, member: discord.Member = None):
        """Force la v√©rification des r√¥les (admin only)."""
        if not member:
            member = ctx.author
        await self.update_cross_trade_access(member)
        await ctx.send(f"üîÑ V√©rification termin√©e pour {member.display_name}", delete_after=5)


async def setup(bot: commands.Bot):
    await bot.add_cog(AutoRole(bot))
    log.info("‚öôÔ∏è AutoRole cog charg√©")
